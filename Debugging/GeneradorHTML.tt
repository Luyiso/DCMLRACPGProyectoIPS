<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" language="C#" hostspecific="True" #>
<#@ output extension=".html" #>
<#@ DCMLRACPGProyectoIPS processor="DCMLRACPGProyectoIPSDirectiveProcessor" requires="fileName='Test.DCMLRACPGProyectoIPS'" #>

<#@ include file="EF.utility.CS.ttinclude" #>

	<#
		var fileManager=EntityFrameworkTemplateFileManager.Create(this);
		if (this.TapizModelo.Clase.Count ==0){
		#>
<html>
	<head>
		<title>
			Diagrama Vácío
		</title>
	</head>
<body>
El diagrama no contiene elementos
</body>
</html>
<#
	}
	else{
#>
<html>
	<head>
		<title>
			<#WriteLine("Página resumen");#>
		</title>
		<style>
table.Clase {
  font-family: Arial, Helvetica, sans-serif;
  border: 6px solid #AA5070;
  background-color: #575A7B;
  width: 250px;
  height: 100px;
  text-align: center;
  border-radius: 25px;
}
table.Clase td, table.Clase th {
  padding: 3px 3px;
}
table.Clase tbody td {
  font-size: 13px;
  color: #BCC9DF;
}
table.Clase thead {
  }
table.Clase thead th {
  font-size: 19px;
  font-weight: bold;
  color: #BCC9DF;
  text-align: center;
}
table.Clase tfoot td {
  font-size: 13px;
}
</style>
</head>

	<body>	
	<table class="Clase" style="height: 169px;" width="200"> 
						>
	<thead>
	<tr>
	<th>
		<#
		WriteLine("Autor: Luis Rodríguez Arriero");
		#>
	</th>
	</tr>
	</thead>
	<tbody>
		<tr>
			<td>
			<#
			WriteLine("En el resto de archivos hay " + this.TapizModelo.Clase.Count + " clases no abstractas");
			#>
			</td>
		<tr>
	</tbody>
	</table>
</body>
</html>
<#
	foreach (Clase i in this.TapizModelo.Clase)
	{
		if(i is ClaseAbstracta)
			{}
		else
		{
			string colorTexto = "#000000";
			if(0<=i.NombreColorR && i.NombreColorR<=255 && 0<=i.NombreColorG && i.NombreColorG<=255 && 0<=i.NombreColorB && i.NombreColorR<=255)
			colorTexto = "#" + i.NombreColorR.ToString("X") + i.NombreColorG.ToString("X") + i.NombreColorB.ToString("X"); 
			string colorFondo = "#FFFFFF";
			if(0<=i.FondoColorR && i.FondoColorR<=255 && 0<=i.FondoColorG && i.FondoColorG<=255 && 0<=i.FondoColorB && i.FondoColorR<=255)
			colorFondo = "#" + i.FondoColorR.ToString("X") + i.FondoColorG.ToString("X") + i.FondoColorB.ToString("X"); 
			string tipoLetra = i.TipoLetra.ToString();
			if(tipoLetra == "ComicSansMS") tipoLetra = "Comic Sans MS";
			string alineacion = i.Alineacion.ToString();
			fileManager.StartNewFile(i.Name + ".html");
#>
<html>
	<head>
		<title>
			<#WriteLine(i.Name);#>
		</title>
		<style>
table.Clase {
  font-family: Arial, Helvetica, sans-serif;
  border: 6px solid #AA5070;
  background-color: #575A7B;
  width: 250px;
  height: 100px;
  text-align: center;
  border-radius: 25px;
}
table.Clase td, table.Clase th {
  padding: 3px 3px;
}
table.Clase tbody td {
  font-size: 13px;
  color: #BCC9DF;
}
table.Clase thead {
  }
table.Clase thead th {
  font-size: 19px;
  font-weight: bold;
  color: #BCC9DF;
  text-align: center;
}
table.Clase tfoot td {
  font-size: 13px;
}
</style>
</head>

	<body>	
	<table class="Clase" style="height: 169px; 
						<# 
						if(i.Enriquecida)
							{
							#>
							text-align : <#WriteLine(alineacion);#>;
							color : <#WriteLine(colorTexto);#>; 
							font :  <#WriteLine(tipoLetra);#>;
							<#
							}
							#>" 
							width="154" 
						>
	<thead>
	<tr>
	<th>
		<#
		WriteLine(i.Name);
		#>
	</th>
	</tr>
	</thead>
	<tbody>
		<tr>
			<td>
			<#
			WriteLine("ID = " + i.Identificador);
			#>
			</td>
		</tr>
<#
if(i.SuperClase != null){
#>
<tr>
	<td>
	<#
	Herencia her = Herencia.GetLinkToSuperClase(i);
	Clase sup = i.SuperClase; 
	WriteLine("SuperClase : " + sup.Name + ". Herencia " + her.TotalParcial + " " + her.DisjuntaSolapada);
	#>
	</td>
</tr>
<#}#>
<#
if (i.Atributo.Count> 0){
	#>
	<tr>
		<td>
			<# 
			WriteLine("Atributos <br />"); 
			#>
		</td>
	</tr>
	<#
	foreach (Atributo j in i.Atributo)
		{
		string colorTextoAtributo = "000000";
		if(0<=j.ColorLetraR && j.ColorLetraR<=255 && 0<=j.ColorLetraG && j.ColorLetraG<=255 && 0<=j.ColorLetraB && j.ColorLetraB<=255)
		colorTextoAtributo = "#" + j.ColorLetraR.ToString("X") + j.ColorLetraG.ToString("X") + j.ColorLetraB.ToString("X"); 
		string tipoLetraAtributo = j.TipoLetra.ToString();
		if(tipoLetraAtributo == "ComicSansMS") tipoLetraAtributo = "Comic Sans MS";
		#>
		<tr>
	<#if(j.Enriquecido){
#>
	<td style = "color : <#WriteLine(colorTextoAtributo);#>; font :  <#WriteLine(tipoLetraAtributo);#> ;">
<#		} else {WriteLine("<td>");	
		if(j.FormatoBooleano.ToString() == "RadioButton")
		{
		#>
		<input type="radio" id="bool" name="radiobutton" value=true">
		<#
		}
		else 
		{
		#>
		<input type="checkbox" id="bool" name="checkbox" value="true">
		<#
		}
		#>
		<label for="atributo">
		<#WriteLine(j.NameTipo);#> 
		</label><br>
		<#
#>

		</td>
<#}#>
		
	</tr>
		<#
		}
		}
if (i.Metodo.Count> 0){
			#>
			<tr>
				<td>
					<# 
					WriteLine("Métodos <br />"); 
					#>
				</td>
			</tr>
			<#
	foreach (Metodo j in i.Metodo)
	{
		string colorTextoMetodo = "000000";
		if(0<=j.ColorLetraR && j.ColorLetraR<=255 && 0<=j.ColorLetraG && j.ColorLetraG<=255 && 0<=j.ColorLetraB && j.ColorLetraB<=255)
		colorTextoMetodo = "#" + j.ColorLetraR.ToString("X") + j.ColorLetraG.ToString("X") + j.ColorLetraB.ToString("X"); 
		string tipoLetraMetodo = j.TipoLetra.ToString();
		if(tipoLetraMetodo == "ComicSansMS") tipoLetraMetodo = "Comic Sans MS";
#>
	<tr>
	<#if(j.Enriquecido){
#>
	<td style = "color : <#WriteLine(colorTextoMetodo);#>; font :  <#WriteLine(tipoLetraMetodo);#> ;">
<#		} else {WriteLine("<td>");		
		if(j is MétodoAbstracto) WriteLine ("(Abstracto) "); 
		WriteLine(j.NameTipoRetorno); 
#>

		</td>
<#}#>
		
	</tr>
<#
		if (j.Parametro.Count> 0)
		{
#>
	<tr>
		<td>
<# 
			WriteLine("Parámetros <br />"); 
#>
		</td>
	</tr>
<#
			foreach (Parametro k in j.Parametro)
				{
#>
	<tr>
		<td>&tab
<# 
			WriteLine(k.Nombre + " ( " + k.TipoDato + " ) " + k.TipoParametro.ToString() + ")" + "<br />" + k.Detalles); 
#>
		</td>
	</tr>
<#
			
				}	
		}
	}
		
if (i.TargetClase.Count> 0){
	#><tr><td><#
	WriteLine("Asociaciones: "); 
	#></td></tr><#
	foreach(Asociacion a in Asociacion.GetLinksToTargetClase(i))
		{
		#>
		<tr>
		<td> &tab
		<# 
		WriteLine(a.Nombre + " Cardinalidad Origen = " + a.CardinalidadMinimaSource.ToString() + ".." + a.CardinalidadMaximaSource.ToString() +  
							" Nombre Objetivo = " + a.TargetClase.Name +  
							" Cardinalidad Objetivo = " + a.CardinalidadMinimaTarget.ToString() + ".." + a.CardinalidadMaximaTarget.ToString()); 
		#>
		</td>
		</tr>
		<#
		}
	}
if (i.Compuesta.Count> 0){
	#><tr><td><#
	WriteLine("Agregaciones: "); 
	#></td></tr><#
	foreach(Agregacion a in Agregacion.GetLinksToCompuesta(i))
		{
		#>
		<tr>
		<td> &tab
		<# 
		WriteLine("Tipo de Agregación: " + a.TipoAgregación + "</br>" + a.Nombre + " Cardinalidad Componente = " + a.CardMinComponente.ToString() + ".." + a.CardMaxComponente.ToString() +  
							//" Nombre de la Compuesta = " + a.Compuesta.Name +  No funciona
							" Cardinalidad de la Compuesta = " + a.CardMinCompuesta.ToString() + ".." + a.CardMaxCompuesta.ToString()); 
		#>
		</td>
		</tr>
		<#
		}
	}

	#>

	<#		
	}
	#>
	</tbody>
</table> 
</body>
</html>
<#
		}
	}
	}
		fileManager.Process();
	#>
